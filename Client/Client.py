# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ChattingAppNew.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import  socket
import threading
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QPropertyAnimation, Qt
from PyQt5.QtWidgets import QMainWindow

from Draggable import Draggable

HOST = '127.0.0.1'
PORT = 9090

class Ui_MainWindow(object):
    def __init__(self, host, port):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((host, port))
        # self.nickname ="UGO"
        # Create a simple gui to set your user nickname
        self.gui_done = False
        self.running = True
        #Set window available to none
        self.windowAvailable=None
        self.getUsername()

        gui_thread = threading.Thread(target=self.setupUi(MainWindow))
        receive_thread = threading.Thread(target=self.receive)

        gui_thread.start()
        receive_thread.start()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(736, 528)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.SlidingMenu = QtWidgets.QFrame(self.centralwidget)
        self.SlidingMenu.setEnabled(True)
        self.SlidingMenu.setMaximumSize(QtCore.QSize(50, 16777215))
        self.SlidingMenu.setStyleSheet("background-color: rgb(26, 26, 26);")
        self.SlidingMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.SlidingMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.SlidingMenu.setObjectName("SlidingMenu")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.SlidingMenu)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Button_layout_side = QtWidgets.QGridLayout()
        self.Button_layout_side.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.Button_layout_side.setContentsMargins(-1, 0, 0, 0)
        self.Button_layout_side.setHorizontalSpacing(0)
        self.Button_layout_side.setVerticalSpacing(156)
        self.Button_layout_side.setObjectName("Button_layout_side")
        self.Hamburger = QtWidgets.QPushButton(self.SlidingMenu)
        self.Hamburger.setStyleSheet("QPushButton{\n"
"border:none;\n"
"border-radius:5px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(38, 38, 38);\n"
"}")
        self.Hamburger.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/white-menu-icon-12.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Hamburger.setIcon(icon)
        self.Hamburger.setIconSize(QtCore.QSize(64, 64))
        self.Hamburger.setObjectName("Hamburger")
        self.Hamburger.clicked.connect(self.slide_left_menu)

        self.Button_layout_side.addWidget(self.Hamburger, 0, 0, 1, 1)
        self.Settings_button = QtWidgets.QPushButton(self.SlidingMenu)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.Settings_button.setFont(font)
        self.Settings_button.setStyleSheet("QPushButton{\n"
"border:none;\n"
"color: rgb(255, 255, 255);\n"
"padding:10px;\n"
"padding-left:50px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(38, 38, 38);\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/setting-icon-png-18.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Settings_button.setIcon(icon1)
        self.Settings_button.setIconSize(QtCore.QSize(32, 32))
        self.Settings_button.setObjectName("Settings_button")
        self.Button_layout_side.addWidget(self.Settings_button, 4, 0, 1, 1)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setContentsMargins(49, 0, 0, 0)
        self.verticalLayout_4.setSpacing(25)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.UserIcon = QtWidgets.QLabel(self.SlidingMenu)
        self.UserIcon.setMinimumSize(QtCore.QSize(76, 90))
        self.UserIcon.setMaximumSize(QtCore.QSize(100, 51))
        self.UserIcon.setStyleSheet("")
        self.UserIcon.setText("")
        self.UserIcon.setPixmap(QtGui.QPixmap(":/Icons/824-8246267_time-left-user-icon-round-png.png"))
        self.UserIcon.setScaledContents(True)
        self.UserIcon.setAlignment(QtCore.Qt.AlignCenter)
        self.UserIcon.setWordWrap(False)
        self.UserIcon.setContentsMargins(0,0,20,0)
        self.UserIcon.setIndent(0)
        self.UserIcon.setObjectName("UserIcon")
        self.verticalLayout_4.addWidget(self.UserIcon)
        self.UserNickname = QtWidgets.QLabel(self.SlidingMenu)
        self.UserNickname.setMinimumSize(QtCore.QSize(0, 0))
        self.UserNickname.setMaximumSize(QtCore.QSize(16777214, 20))
        self.UserNickname.setStyleSheet(u"QLabel {\n"
                                    "color: white;\n"
                                    "font: 12pt \"MS Shell Dlg 2\";\n"    
                                    "border-top:none;\n"
                                    "border-left:none;\n"
                                    "border-right:none;\n"
                                    "border-bottom: none;\n"
                                    "background-color:none;\n"
                                    "}\n"
                                    "")
        #self.UserNickname.setStyleSheet("color: rgb(255, 255, 255);")
        self.UserNickname.setIndent(0)
        self.UserNickname.setContentsMargins(0,0,59,0)
        self.UserNickname.setObjectName("UserNickname")
        self.UserNickname.setAlignment(Qt.AlignHCenter)
        self.UserNickname.setWordWrap(True)
        self.UserNickname.setFixedHeight(55)
        self.verticalLayout_4.addWidget(self.UserNickname)
        self.Button_layout_side.addLayout(self.verticalLayout_4, 1, 0, 1, 1)
        self.verticalLayout.addLayout(self.Button_layout_side)
        self.horizontalLayout.addWidget(self.SlidingMenu)
        self.MainChat = QtWidgets.QFrame(self.centralwidget)
        self.MainChat.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.455, y2:0.920455, stop:0.00568182 rgba(17, 111, 75, 225), stop:1 rgba(0, 0, 0, 255));")
        self.MainChat.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainChat.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainChat.setObjectName("MainChat")
        self.gridLayout = QtWidgets.QGridLayout(self.MainChat)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.textBrowser = QtWidgets.QTextBrowser(self.MainChat)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(11)
        font.setItalic(False)
        self.textBrowser.setFont(font)

        self.textBrowser.setStyleSheet("color: rgb(255, 255, 255);""background-color: rgb(85, 85, 85);\n"
"border:none")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout.addWidget(self.textBrowser, 0, 0, 1, 2)
        self.textEdit = QtWidgets.QTextEdit(self.MainChat)
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 64))
        font = QtGui.QFont()
        font.setFamily("Dubai Medium")
        font.setPointSize(12)
        self.textEdit.setFont(font)
        self.textEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(65, 65, 65);\n"
"border:none")
        self.textEdit.setInputMethodHints(QtCore.Qt.ImhMultiLine|QtCore.Qt.ImhSensitiveData)
        self.textEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 1, 0, 1, 1)
        self.Send_Button = QtWidgets.QPushButton(self.MainChat)
        self.Send_Button.clicked.connect(self.write)
        self.Send_Button.setBaseSize(QtCore.QSize(6, 0))
        self.Send_Button.setStyleSheet("QPushButton{\n"
"background-color: rgb(60, 60, 60);\n"
"color: rgb(255, 255, 255);\n"
"border:none;\n"
"padding-right:60px;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(38, 38, 38);\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/content+send+icon-1320087227200139227.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Send_Button.setIcon(icon2)
        self.Send_Button.setIconSize(QtCore.QSize(64, 64))
        self.Send_Button.setObjectName("Send_Button")
        self.gridLayout.addWidget(self.Send_Button, 1, 1, 1, 1)
        self.horizontalLayout.addWidget(self.MainChat)
        self.MainChat.raise_()
        self.SlidingMenu.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.gui_done = True

    def getUsername(self):
        if self.windowAvailable is None:
            self.windowAvailable = Draggable()
        if self.windowAvailable.exec_():
            self.nickname=self.windowAvailable.lineEdit.text()
        self.windowAvailable = None

    def write(self):
        '''This function gets the message and sends it to the server which broadcasts it'''
        message = f"{self.nickname}:{self.textEdit.toPlainText()}\n"
        self.sock.send(message.encode('UTF-8'))
        self.textEdit.clear()

    def receive(self):
        '''While client is running decode every message from the server and insert it as plain text
        Close connection if there is a disconnect or error
        '''
        while self.running:
            try:
                message=self.sock.recv(1024).decode('UTF-8')
                if message=='NICK':
                    self.sock.send(self.nickname.encode('UTF-8'))
                else:
                    if self.gui_done:
                        self.textBrowser.insertPlainText(message+"\n")
            except ConnectionAbortedError:
                break
            except:
                print("error")
                self.sock.close()
                break

    def closeEvent(self, event):
        self.running = False
        self.sock.close()
        QMainWindow.closeEvent(self, event)
        exit(0)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Settings_button.setText(_translate("MainWindow", "Settings"))
        self.UserNickname.setText(_translate("MainWindow", self.nickname))
        self.Send_Button.setText(_translate("MainWindow", "SEND"))

    def slide_left_menu(self):
        '''Function To create Sliding Left Menu With QFrame'''
        width = self.SlidingMenu.width()
        if width == 50:
            newwidth = 180
            if ' ' in self.UserNickname.text():
                print("There is space")
                self.UserNickname.setFixedWidth(110)
                self.UserNickname.setContentsMargins(0, 0, 30, 0)
                self.UserNickname.setWordWrap(True)
                self.UserNickname.setAlignment(Qt.AlignHCenter)
            else:
                print("there is no spacce")
                self.UserNickname.setFixedWidth(150)
                self.UserNickname.setContentsMargins(0, 0, 0, 0)
                self.UserNickname.setAlignment(Qt.AlignAbsolute)
            # self.UserNickname.setWordWrap(True)

        else:
            newwidth = 50

        # Animate the transiton
        self.animation = QPropertyAnimation(self.SlidingMenu, b"minimumWidth")
        self.animation.setDuration(250)
        self.animation.setStartValue(width)
        self.animation.setEndValue(newwidth)
        self.animation.setEasingCurve(QtCore.QEasingCurve.InOutQuart)
        self.animation.start()

import Icons_Resource_rc

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(HOST,PORT)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
